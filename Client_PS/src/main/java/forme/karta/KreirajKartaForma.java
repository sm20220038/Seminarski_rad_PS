/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forme.karta;

import domain.Karta;
import domain.Linija;
import domain.Operater;
import domain.Putnik;
import domain.StavkaKarte;
import java.sql.Date;
import java.sql.Time;
import java.time.LocalTime;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JOptionPane;
import kontroleri.KontrolerKarta;
import kontroleri.KontrolerPutnik;
import listener.KartaListener;
import modeli.ModelTabeleIzabraneStavke;

/**
 *
 * @author stefa
 */
public class KreirajKartaForma extends javax.swing.JFrame {
    private KontrolerKarta kontrolerKarta;
    private KontrolerPutnik kontrolerPutnik;
    private List<Operater> operateri;
    private List<Putnik> putnici;
    private List<Linija> linije;
    private Karta karta;
    private List<StavkaKarte> listaStavki = new LinkedList<>();
    private ModelTabeleIzabraneStavke model;
    private KartaListener kartaListener;
    private double ukupnaCena = 0;
    /**
     * Creates new form KreirajRacunForma
     */
    public KreirajKartaForma() {
        karta = null;
        kontrolerKarta = KontrolerKarta.getInstance();
        kontrolerPutnik = KontrolerPutnik.getInstance();
        initComponents();
        txtKolicina.setEditable(false);
        btnDodajStavku.setEnabled(false);
        btnSacuvaj.setEnabled(false);
        btnObrisiStavku.setEnabled(false);
        cmbLinija.setEnabled(false);
        model = new ModelTabeleIzabraneStavke();
        tblStavke.setModel(model);
        this.setLocationRelativeTo(null);
        napuniComboBoxeve();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cmbOperater = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cmbPutnik = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cmbLinija = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        txtKolicina = new javax.swing.JTextField();
        btnKreiraj = new javax.swing.JButton();
        btnSacuvaj = new javax.swing.JButton();
        btnDodajStavku = new javax.swing.JButton();
        btnObrisiStavku = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStavke = new javax.swing.JTable();
        lblCena = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtValuta = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtVremeUlaska = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtVremeIzlaska = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Kreiraj Kartu");

        jLabel1.setText("Operater:");

        cmbOperater.setModel(new javax.swing.DefaultComboBoxModel<>());

        jLabel2.setText("Putnik:");

        cmbPutnik.setModel(new javax.swing.DefaultComboBoxModel<>());

        jLabel3.setText("Linija:");

        cmbLinija.setModel(new javax.swing.DefaultComboBoxModel<>());

        jLabel4.setText("Kolicina:");

        btnKreiraj.setText("Kreiraj");
        btnKreiraj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKreirajActionPerformed(evt);
            }
        });

        btnSacuvaj.setText("Sacuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        btnDodajStavku.setText("Dodaj stavku");
        btnDodajStavku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajStavkuActionPerformed(evt);
            }
        });

        btnObrisiStavku.setText("Obrisi stavku");
        btnObrisiStavku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiStavkuActionPerformed(evt);
            }
        });

        tblStavke.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblStavke);

        lblCena.setText("Ukupna cena:");

        jLabel5.setText("Stavke karte:");

        jLabel6.setText("Valuta:");

        txtValuta.setText("RSD");

        jLabel7.setText("Vreme ulaska:");

        jLabel8.setText("Vreme izlaska:");

        jLabel9.setText("Unosite vremena u formatu HH:mm:ss");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCena, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(39, 39, 39)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbOperater, 0, 145, Short.MAX_VALUE)
                                    .addComponent(cmbLinija, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbPutnik, 0, 170, Short.MAX_VALUE)
                                    .addComponent(txtKolicina))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtVremeUlaska, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                    .addComponent(txtValuta))
                                .addGap(29, 29, 29)
                                .addComponent(jLabel8)
                                .addGap(29, 29, 29)
                                .addComponent(txtVremeIzlaska, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnKreiraj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDodajStavku))
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSacuvaj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnObrisiStavku))
                .addGap(62, 62, 62))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(537, 537, 537))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbOperater, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cmbPutnik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnKreiraj)
                    .addComponent(btnSacuvaj)
                    .addComponent(jLabel6)
                    .addComponent(txtValuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbLinija, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtKolicina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDodajStavku)
                    .addComponent(btnObrisiStavku)
                    .addComponent(jLabel7)
                    .addComponent(txtVremeUlaska, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(txtVremeIzlaska, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblCena)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnKreirajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKreirajActionPerformed
        Operater o = (Operater) cmbOperater.getSelectedItem();
        Putnik p = (Putnik) cmbPutnik.getSelectedItem();
        if(p == null){
            JOptionPane.showMessageDialog(this, "Sistem ne moze da kreira kartu", "Greska", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Date datum = new Date(System.currentTimeMillis());
        String valuta = txtValuta.getText().trim();
        Karta k = new Karta((long) -1, 0, valuta, o, p, datum);
        karta = kontrolerKarta.kreirajKartu(k);
        if(karta != null){
            JOptionPane.showMessageDialog(this, "Sistem je kreirao kartu", "Uspeh", JOptionPane.INFORMATION_MESSAGE);
            
            cmbPutnik.setEnabled(false);
            txtKolicina.setEditable(true);
            btnKreiraj.setEnabled(false);
            btnDodajStavku.setEnabled(true);
            btnSacuvaj.setEnabled(true);
            btnObrisiStavku.setEnabled(true);
            cmbLinija.setEnabled(true);
            cmbOperater.setEnabled(false);
            txtValuta.setEnabled(false);
        }else{
            JOptionPane.showMessageDialog(this, "Sistem ne moze da kreira kartu", "Greska", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnKreirajActionPerformed

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
        if (listaStavki.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Sistem ne moze da zapamti kartu", "Greska", JOptionPane.ERROR_MESSAGE);
            return;
        }
        double ukupnaCena = 0;
        for (StavkaKarte stavkaKarte : listaStavki) {
            ukupnaCena += stavkaKarte.getCenaStavke();
            System.out.println(stavkaKarte.getLinija().toString() + " " + stavkaKarte.getCenaStavke());
        }
        karta.setPutnik((Putnik) cmbPutnik.getSelectedItem());
        karta.setOperater((Operater) cmbOperater.getSelectedItem());
        karta.setStavkeKarte(listaStavki);
        karta.setValuta(txtValuta.getText().trim());
        karta.setUkupnaCena(ukupnaCena);
        try {
            kontrolerKarta.sacuvajKartu(karta);
            JOptionPane.showMessageDialog(this, "Sistem je zapamtio kartu", "Uspeh", JOptionPane.INFORMATION_MESSAGE);
            if(kartaListener != null){
                kartaListener.kartaIzmenjena();
            }
            this.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Sistem ne moze da zapamti kartu", "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSacuvajActionPerformed

    private void btnDodajStavkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajStavkuActionPerformed
        int kolicina = 0;
        try {
            kolicina = Integer.parseInt(txtKolicina.getText().trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Sistem ne moze da doda stavku", "Greska", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Linija linija = (Linija) cmbLinija.getSelectedItem();
        double cena = linija.getCenaVoznje();
        double iznos = kolicina * cena;
        String valuta = txtValuta.getText().trim();
        LocalTime vremeUlaska = LocalTime.parse(txtVremeUlaska.getText().trim());
        LocalTime vremeIzlaska = LocalTime.parse(txtVremeIzlaska.getText().trim());
        Time sqlVremeUlaska = Time.valueOf(vremeUlaska);
        Time sqlVremeIzlaska = Time.valueOf(vremeIzlaska);
        StavkaKarte sk = new StavkaKarte((long) -1, karta, kolicina, cena, new Date(System.currentTimeMillis()), sqlVremeUlaska, sqlVremeIzlaska, valuta, linija);
        
        if(listaStavki.contains(sk)){
            for (StavkaKarte stavkaKarte : listaStavki) {
                if(stavkaKarte.equals(sk)){
                    stavkaKarte.setKolicina(kolicina + stavkaKarte.getKolicina());
                    stavkaKarte.setCenaStavke(iznos + stavkaKarte.getCenaStavke());
                    model.fireTableDataChanged();
                }
            }
        } else{
            listaStavki.add(sk);
            model.dodajStavku(sk);
        }
        ukupnaCena = 0;
        for (StavkaKarte stavkaKarte : listaStavki) {
            ukupnaCena += stavkaKarte.getCenaStavke();
        }
        lblCena.setText("Ukupna cena: " + ukupnaCena);
        txtKolicina.setText("");
        System.out.println("Karta id: " + karta.getId());
    }//GEN-LAST:event_btnDodajStavkuActionPerformed

    private void btnObrisiStavkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiStavkuActionPerformed
        int red = tblStavke.getSelectedRow();
        if (red == -1) {
            JOptionPane.showMessageDialog(this, "Niste izabrali stavku za izbacivanje!", "Greska", JOptionPane.ERROR_MESSAGE);
            txtKolicina.setText("");
            return;
        }
        
        StavkaKarte sk = model.vratiStavku(red);
        model.izbaciStavku(sk);
        listaStavki.remove(sk);
        ukupnaCena = 0;
        for (StavkaKarte stavkaKarte : listaStavki) {
            ukupnaCena += stavkaKarte.getCenaStavke();
        }
        lblCena.setText("Ukupna cena: " + ukupnaCena);
        txtKolicina.setText("");
        karta.setUkupnaCena(ukupnaCena);
        System.out.println("Karta id: " + karta.getId());
    }//GEN-LAST:event_btnObrisiStavkuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KreirajKartaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KreirajKartaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KreirajKartaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KreirajKartaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KreirajKartaForma().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodajStavku;
    private javax.swing.JButton btnKreiraj;
    private javax.swing.JButton btnObrisiStavku;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JComboBox<Linija> cmbLinija;
    private javax.swing.JComboBox<Operater> cmbOperater;
    private javax.swing.JComboBox<Putnik> cmbPutnik;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCena;
    private javax.swing.JTable tblStavke;
    private javax.swing.JTextField txtKolicina;
    private javax.swing.JTextField txtValuta;
    private javax.swing.JTextField txtVremeIzlaska;
    private javax.swing.JTextField txtVremeUlaska;
    // End of variables declaration//GEN-END:variables

    private void napuniComboBoxeve() {
        operateri = kontrolerKarta.ucitajOperatere();
        putnici = kontrolerPutnik.ucitajSvePutnike();
        linije = kontrolerKarta.ucitajLinije();
        for (Operater operater : operateri) {
            cmbOperater.addItem(operater);
        }
        for (Putnik putnik : putnici) {
            cmbPutnik.addItem(putnik);
        }
        for (Linija linija : linije) {
            cmbLinija.addItem(linija);
        }
    }
    public void setKartaListener(KartaListener kartaListener){
        this.kartaListener = kartaListener;
    }

    public void setKarta(Karta karta) {
        this.karta = karta;

        cmbOperater.setSelectedItem(karta.getOperater()); 
        cmbPutnik.setSelectedItem(karta.getPutnik());     
        txtValuta.setText(karta.getValuta());
        this.listaStavki.clear(); 
        if(karta.getStavkeKarte() != null) {
            this.listaStavki.addAll(karta.getStavkeKarte());
        }
    
        model.setOriginalnaLista(karta.getStavkeKarte()); 
        ukupnaCena = 0;
        for (StavkaKarte stavkaKarte : karta.getStavkeKarte()) {
            ukupnaCena += stavkaKarte.getCenaStavke();
        }
        lblCena.setText("Ukupna cena: " + ukupnaCena);
        cmbOperater.setEnabled(false);
        cmbPutnik.setEnabled(false);
        btnKreiraj.setEnabled(false);
        btnSacuvaj.setEnabled(true);
        cmbLinija.setEnabled(true);
        txtKolicina.setEditable(true);
        btnDodajStavku.setEnabled(true);
        btnObrisiStavku.setEnabled(true);
        this.setLocationRelativeTo(null);
    }
}
